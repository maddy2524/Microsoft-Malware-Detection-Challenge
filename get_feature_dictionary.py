def get_feature_dictionary(path):
    def vocab_builder(typ):
        """
        Builds vocabulary for unigram and bigrams for byte chars
        ````````````````````````````````````````````````````````
        Args: unigram,bigram
        N-gram type.
        `````````````````````````````````
        Returns: vocab: Unigram/Bigram
        ```````````````````````
        """
        hex_char=[hex(i).replace('0x','') for i in range(256)]
        for i in range(len(hex_char)):
            if len(hex_char[i])==1:
                hex_char[i]='0'+hex_char[i]
                
        if typ=='bigram':
            bi_vocab=[]
            for first in hex_char:
                for second in hex_char:
                    bi_vocab.append(first+' '+second)
            return bi_vocab  
    
        return hex_char
    

    feature_dictionary=[]
    feature_dictionary.extend(('Byte_File_size','Asm_File_size'))
    feature_dictionary.extend(vocab_builder('unigram'))
    feature_dictionary.extend(vocab_builder('bigram'))
    asm_images_list=[f'ASM_{num}' for num in range(1000)]
    feature_dictionary.extend(asm_images_list)
    return feature_dictionary
